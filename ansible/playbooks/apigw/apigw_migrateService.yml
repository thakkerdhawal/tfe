######## Play 1: setup inventory ########

- hosts: localhost
  connection: local
  gather_facts: no
  roles:
  - role: ../../roles/generic_addHosts
    vars:
      consulKeyPath: "https://ecomm.fm.rbsgrp.net/v1/kv/application/nwm/{{ awsEnv | mandatory }}/terraform/core/outputs/agilemarkets/{{ awsRegion | mandatory }}/apigw_instances_private_ip?raw"
      groupName: apigw
 
######## Play 2: configura API Gateway ########
- hosts: apigw
  vars_files:
  - ../../vars_files/apigw
  - files/config/{{ 'nonprod' if awsEnv != 'prod' else 'prod' }}.yml
  remote_user: "{{ remoteUser }}"
  gather_facts: yes
  vars:
    forceUpdate: false
    serviceSourceRepo: "{{ afPath }}/SecurityServices"
    targetFolder: "SecurityServices"
    keepDownloaded: false         # set true for troubleshooting
    migrationSummary: {}
  tasks:
  - name: "Block: retrieve password from Consul"
    block:
    - name: "set variable consulTokenPassword using Env variable"
      set_fact:
        consulTokenPassword: "{{ lookup('env','CONSUL_HTTP_TOKEN') }}"
      when: consulTokenPassword is not defined 
    - fail:
        msg: "Valid consul token required in either env var 'CONSUL_HTTP_TOKEN' or as input var 'consulTokenPassword'"
      when: consulTokenPassword == ""
    - name: "lookup initial password in Consul"
      uri:
        url: "https://ecomm.fm.rbsgrp.net/v1/kv/application/nwm/{{ awsEnv | mandatory }}/terraform/core/outputs/agilemarkets/{{ awsRegion | mandatory }}/apigw_initial_password?raw"
        headers:
          X-Consul-Token: "{{ consulTokenPassword }}"
        status_code: 200
        return_content: true
      register: consulOutputPassword
    - name: "set variable apigwPassword with initial password in Consul"
      set_fact:
        apigwPassword: "{{ consulOutputPassword.content }}"
    when: apigwPassword is not defined 
    delegate_to: localhost
    connection: local
    run_once: true

  - name: "Block: main()"
    block: 
    - name: "create temporary download directory"
      tempfile:
        state: directory
        prefix: download.
        path: "{{ playbook_dir }}"
      delegate_to: localhost
      connection: local
      run_once: true
      register: mktemp
    - name: "set variable serviceTempPath"
      set_fact:
        serviceTempPath: "{{ mktemp.path }}"
    - debug: 
        msg: "Service definition XML will be download to temp directory {{ serviceTempPath }}"
      delegate_to: localhost
      connection: local
      run_once: true
    - name: "Child task: migrate service - {{ targetService }}"
      include_tasks: tasks/migrateService.yml
      vars:
        serviceName: "{{ item.key }}"
        serviceExportVersion: "{{ item.value }}"
      loop: "{{ lookup('dict', securityServices) }}"
      when: targetService | lower  == "all" or item.key == targetService

    always:
    - name: "Clean up: remove temp directory {{ serviceTempPath }}"
      file:
        path: "{{ serviceTempPath }}"
        state: absent
      when: keepDownloaded | bool == false
      delegate_to: localhost
      connection: local
      run_once: true
    - name: "Summary of migration result"
      debug: var=migrationSummary

  - name: "Health Check"
    include_tasks: tasks/runHealthChecks.yml

